/* This is an example implementation of the functions defined in signals.h that
* are required to compile and deploy to the OpenXC CAN translator. This file is
* different from signals.cpp.example in that it does not define any CAN messages
* to be translated, and instead uses the can::read::passthroughMessage function to spit
* out raw CAN data from the bus over USB and UART.
*/

#ifndef CAN_EMULATOR
#include "can/canread.h"
#include "can/canwrite.h"
#include "signals.h"
#include "util/log.h"
#include "handlers.h"
#include "shared_handlers.h"

using openxc::can::read::can::read::passthroughMessage;

#ifdef __LPC17XX__
#define can1 LPC_CAN1
#define can2 LPC_CAN2
#endif // __LPC17XX__

#ifdef __PIC32__
extern void* can1;
extern void* can2;
extern void handleCan1Interrupt();
extern void handleCan2Interrupt();
#endif // __PIC32__

const int CAN_BUS_COUNT = 2;
CanBus CAN_BUSES[CAN_BUS_COUNT] = {
    { 500000, 0x101, can1,
#ifdef __PIC32__
        handleCan1Interrupt,
#endif // __PIC32__
    },
    { 125000, 0x102, can2,
#ifdef __PIC32__
        handleCan2Interrupt,
#endif // __PIC32__
    },
};

void openxc::signals::initializeSignals() { }

const int SIGNAL_COUNT = 0;
CanSignalState SIGNAL_STATES[SIGNAL_COUNT][12] = {
};

CanSignal SIGNALS[SIGNAL_COUNT] = {
};

const int COMMAND_COUNT = 0;
CanCommand COMMANDS[COMMAND_COUNT] = {
};

CanCommand* openxc::signals::getCommands() {
    return COMMANDS;
}

int openxc::signals::getCommandCount() {
    return COMMAND_COUNT;
}

CanSignal* openxc::signals::getSignals() {
    return SIGNALS;
}

int openxc::signals::getSignalCount() {
    return SIGNAL_COUNT;
}

CanBus* openxc::signals::getCanBuses() {
    return CAN_BUSES;
}

int openxc::signals::getCanBusCount() {
    return CAN_BUS_COUNT;
}

const char* openxc::signals::getMessageSet() {
    return "passthrough-2012";
}

void openxc::signals::decodeCanMessage(Pipeline* pipeline, CanBus* bus, int id, uint64_t data) {
    can::read::passthroughMessage(pipeline, id, data);
}

CanFilter FILTERS[0];

CanFilter* openxc::signals::initializeFilters(uint64_t address, int* count) {
    *count = 0;
    return FILTERS;
}

#endif // CAN_EMULATOR
